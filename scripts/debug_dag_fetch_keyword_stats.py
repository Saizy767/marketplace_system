from src.config.endpoints import endpoints
from src.api_client.generic import GenericApiClient
from src.schemas.api_schemas.stats_keywords import StatResponse
from src.transformers.keyword_stats import KeywordStatsTransformer
from src.loaders.postgres_keyword_stats import PostgresKeywordStatsLoader
from src.db.postgres import PostgresEngineManager
from datetime import datetime, timezone

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
advert_id = "29441288"
start_date = datetime(2025, 10, 23, 0, 0, 0, tzinfo=timezone.utc)
end_date = datetime(2025, 10, 24, 0, 0, 0, tzinfo=timezone.utc)

print("üîç 1. Fetch: –ó–∞–ø—Ä–æ—Å –∫ API...")
client = GenericApiClient(timeout=30)
try:
    raw_response = client.fetch_data(
        url=endpoints.STATISTIC_WORDS,
        params={
            "id": advert_id,
            "from": start_date,
            "to": end_date,
        },
        response_model=StatResponse,
    )
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(raw_response.stat)} –¥–Ω–µ–π")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
    exit(1)

print("üîÑ 2. Transform: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
transformer = KeywordStatsTransformer()
try:
    records = transformer.transform(raw_response, 
                                    advert_id=advert_id,
                                    data_interval_start=start_date,
                                    data_interval_end=end_date
                                    ) 
    print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    exit(1)

print("üíæ 3. Load: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ PostgreSQL...")
try:
    engine_manager = PostgresEngineManager(conn_id="postgres")
    loader = PostgresKeywordStatsLoader(engine_manager=engine_manager)
    loaded_count = loader.load(records)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É public.keyword_stats")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –ë–î: {e}")
    exit(1)

print("üéâ ETL-–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")